{"version":3,"sources":["note.svg","constants/index.js","util/APIUtils.js","util/Colors.js","note/Note.js","util/Helpers.js","common/LoadingIndicator.js","note/NoteList.js","note/NewNote.js","note/EditNote.js","user/login/Login.js","user/signup/Signup.js","common/NotFound.js","common/ServerError.js","user/profile/Profile.js","common/AppHeader.js","common/PrivateRoute.js","app/App.js","registerServiceWorker.js","index.js"],"names":["module","exports","API_BASE_URL","process","REACT_APP_API_BASE_URL","ACCESS_TOKEN","NOTE_LIST_SIZE","NOTE_TITLE_MAX_LENGTH","NOTE_CONTENT_MAX_LENGTH","NAME_MIN_LENGTH","NAME_MAX_LENGTH","USERNAME_MIN_LENGTH","USERNAME_MAX_LENGTH","EMAIL_MAX_LENGTH","PASSWORD_MIN_LENGTH","PASSWORD_MAX_LENGTH","request","options","headers","Headers","localStorage","getItem","append","defaults","Object","assign","fetch","url","then","response","json","ok","Promise","reject","getUserCreatedNotes","username","page","size","method","colors","getAvatarColor","name","substr","hash","i","length","charCodeAt","index","Math","abs","Note","props","handleDelete","bind","noteId","console","log","confirmAlert","title","message","buttons","label","onClick","body","JSON","stringify","deleteNote","loadNoteListInit","catch","error","status","handleLogout","notification","description","className","span","to","style","backgroundColor","this","note","createdBy","toUpperCase","dateTimeString","date","Date","monthIndex","getMonth","year","getFullYear","getDate","getHours","getMinutes","formatDateTime","creationDateTime","content","pathname","state","id","type","Component","LoadingIndicator","antIcon","fontSize","spin","indicator","display","textAlign","marginTop","NoteList","notes","totalElements","totalPages","last","isLoading","loadNoteList","handleLoadMore","promise","setState","slice","concat","nextProps","isAuthenticated","noteViews","forEach","noteIndex","push","key","gutter","disabled","withRouter","FormItem","Item","TextArea","NewNote","validateTitle","titleText","validateStatus","errorMsg","validateContent","contentText","text","handleSubmit","handleChange","isFormInvalid","event","preventDefault","noteData","createNote","history","value","target","onSubmit","help","placeholder","onChange","autosize","minRows","maxRows","htmlType","EditNote","location","updateNote","Login","AntWrappedLoginForm","create","LoginForm","onLogin","form","validateFields","err","values","loginRequest","login","setItem","accessToken","getFieldDecorator","rules","required","prefix","Signup","validateName","validationStatus","validateEmail","email","RegExp","test","validateUsername","validatePassword","password","handleInputChange","validateUsernameAvailability","validateEmailAvailability","validationFun","inputName","inputValue","signupRequest","signup","success","autoComplete","hasFeedback","onBlur","usernameValue","usernameValidation","available","emailValue","emailValidation","NotFound","ServerError","TabPane","Profile","user","loadUserProfile","getUserProfile","notFound","serverError","match","params","dateString","formatDate","joinedAt","defaultActiveKey","animated","tabBarStyle","tab","noteCount","Header","AppHeader","handleMenuClick","onLogout","menuItems","currentUser","src","noteIcon","alt","ProfileDropdownMenu","mode","selectedKeys","lineHeight","dropdownMenu","Divider","overlay","trigger","getPopupContainer","document","getElementsByClassName","marginRight","PrivateRoute","component","authenticated","rest","render","from","Content","App","loadCurrentUser","handleLogin","config","placement","top","duration","redirectTo","notificationType","removeItem","exact","path","isLocalhost","Boolean","window","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","ReactDOM","getElementById","URL","origin","addEventListener","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.97004fb4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/note.6e7be65f.svg\";","export const API_BASE_URL =\r\n  process.env.REACT_APP_API_BASE_URL ||\r\n  \"https://journal-app-1.herokuapp.com/api\";\r\nexport const ACCESS_TOKEN = \"accessToken\";\r\n\r\nexport const NOTE_LIST_SIZE = 30;\r\nexport const NOTE_TITLE_MAX_LENGTH = 140;\r\nexport const NOTE_CONTENT_MAX_LENGTH = 1400;\r\n\r\nexport const NAME_MIN_LENGTH = 4;\r\nexport const NAME_MAX_LENGTH = 40;\r\n\r\nexport const USERNAME_MIN_LENGTH = 3;\r\nexport const USERNAME_MAX_LENGTH = 15;\r\n\r\nexport const EMAIL_MAX_LENGTH = 40;\r\n\r\nexport const PASSWORD_MIN_LENGTH = 6;\r\nexport const PASSWORD_MAX_LENGTH = 20;\r\n","import { API_BASE_URL, NOTE_LIST_SIZE, ACCESS_TOKEN } from \"../constants\";\r\n\r\nconst request = options => {\r\n  const headers = new Headers({\r\n    \"Content-Type\": \"application/json\"\r\n  });\r\n\r\n  if (localStorage.getItem(ACCESS_TOKEN)) {\r\n    headers.append(\r\n      \"Authorization\",\r\n      \"Bearer \" + localStorage.getItem(ACCESS_TOKEN)\r\n    );\r\n  }\r\n\r\n  const defaults = { headers: headers };\r\n  options = Object.assign({}, defaults, options);\r\n\r\n  return fetch(options.url, options).then(response =>\r\n    response.json().then(json => {\r\n      if (!response.ok) {\r\n        return Promise.reject(json);\r\n      }\r\n      return json;\r\n    })\r\n  );\r\n};\r\n\r\nexport function getAllNotes(page, size) {\r\n  page = page || 0;\r\n  size = size || NOTE_LIST_SIZE;\r\n\r\n  return request({\r\n    url: API_BASE_URL + \"/notes?page=\" + page + \"&size=\" + size,\r\n    method: \"GET\"\r\n  });\r\n}\r\n\r\nexport function getNote(noteId) {\r\n  return request({\r\n    url: API_BASE_URL + \"/notes/\" + noteId,\r\n    method: \"GET\"\r\n  });\r\n}\r\n\r\nexport function createNote(noteData) {\r\n  return request({\r\n    url: API_BASE_URL + \"/notes\",\r\n    method: \"POST\",\r\n    body: JSON.stringify(noteData)\r\n  });\r\n}\r\n\r\nexport function updateNote(noteData) {\r\n  return request({\r\n    url: API_BASE_URL + \"/notes/\" + noteData.id,\r\n    method: \"PUT\",\r\n    body: JSON.stringify(noteData)\r\n  });\r\n}\r\n\r\nexport function deleteNote(noteId) {\r\n  return request({\r\n    url: API_BASE_URL + \"/notes\",\r\n    method: \"DELETE\",\r\n    body: JSON.stringify(noteId)\r\n  });\r\n}\r\n\r\nexport function login(loginRequest) {\r\n  return request({\r\n    url: API_BASE_URL + \"/auth/signin\",\r\n    method: \"POST\",\r\n    body: JSON.stringify(loginRequest)\r\n  });\r\n}\r\n\r\nexport function signup(signupRequest) {\r\n  return request({\r\n    url: API_BASE_URL + \"/auth/signup\",\r\n    method: \"POST\",\r\n    body: JSON.stringify(signupRequest)\r\n  });\r\n}\r\n\r\nexport function checkUsernameAvailability(username) {\r\n  return request({\r\n    url: API_BASE_URL + \"/user/checkUsernameAvailability?username=\" + username,\r\n    method: \"GET\"\r\n  });\r\n}\r\n\r\nexport function checkEmailAvailability(email) {\r\n  return request({\r\n    url: API_BASE_URL + \"/user/checkEmailAvailability?email=\" + email,\r\n    method: \"GET\"\r\n  });\r\n}\r\n\r\nexport function getCurrentUser() {\r\n  if (!localStorage.getItem(ACCESS_TOKEN)) {\r\n    return Promise.reject(\"No access token set.\");\r\n  }\r\n\r\n  return request({\r\n    url: API_BASE_URL + \"/user/me\",\r\n    method: \"GET\"\r\n  });\r\n}\r\n\r\nexport function getUserProfile(username) {\r\n  return request({\r\n    url: API_BASE_URL + \"/users/\" + username,\r\n    method: \"GET\"\r\n  });\r\n}\r\n\r\nexport function getUserCreatedNotes(username, page, size) {\r\n  page = page || 0;\r\n  size = size || NOTE_LIST_SIZE;\r\n\r\n  return request({\r\n    url:\r\n      API_BASE_URL +\r\n      \"/users/\" +\r\n      username +\r\n      \"/notes?page=\" +\r\n      page +\r\n      \"&size=\" +\r\n      size,\r\n    method: \"GET\"\r\n  });\r\n}\r\n","const colors = [\r\n    '#F44336', '#e91e63', '#9c27b0', '#673ab7',\r\n    '#ff9800', '#ff5722', '#795548', '#607d8b',\r\n    '#3f51b5', '#2196F3', '#00bcd4', '#009688',\r\n    '#2196F3', '#32c787', '#00BCD4', '#ff5652',\r\n    '#ffc107', '#ff85af', '#FF9800', '#39bbb0',\r\n    '#4CAF50', '#ffeb3b', '#ffc107',\r\n];\r\n\r\nexport function getAvatarColor(name) {\r\n    name = name.substr(0, 6);\r\n\r\n    var hash = 0;\r\n    for (var i = 0; i < name.length; i++) {\r\n        hash = 31 * hash + name.charCodeAt(i);\r\n    }\r\n    var index = Math.abs(hash % colors.length);\r\n    return colors[index];\r\n}","import React, { Component } from \"react\";\r\nimport \"./Note.css\";\r\nimport { deleteNote } from \"../util/APIUtils\";\r\nimport { confirmAlert } from \"react-confirm-alert\";\r\nimport { Avatar, Button, notification, Row, Col } from \"antd\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { getAvatarColor } from \"../util/Colors\";\r\nimport { formatDateTime } from \"../util/Helpers\";\r\nimport \"react-confirm-alert/src/react-confirm-alert.css\";\r\n\r\nclass Note extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleDelete = this.handleDelete.bind(this);\r\n  }\r\n\r\n  handleDelete(noteId) {\r\n    console.log(\"Delete note : \" + noteId);\r\n    confirmAlert({\r\n      title: \"Confirmation suppression\",\r\n      message: \"Etes vous sure ?\",\r\n      buttons: [\r\n        {\r\n          label: \"Yes\",\r\n          onClick: () => {\r\n            deleteNote(noteId)\r\n              .then(response => {\r\n                this.props.loadNoteListInit();\r\n              })\r\n              .catch(error => {\r\n                if (error.status === 401) {\r\n                  this.props.handleLogout(\r\n                    \"/login\",\r\n                    \"error\",\r\n                    \"You have been logged out. Please login create note.\"\r\n                  );\r\n                } else {\r\n                  notification.error({\r\n                    message: \"Journal App\",\r\n                    description:\r\n                      error.message ||\r\n                      \"Sorry! Something went wrong. Please try again!\"\r\n                  });\r\n                }\r\n              });\r\n          }\r\n        },\r\n        {\r\n          label: \"No\",\r\n          onClick: () => {}\r\n        }\r\n      ]\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Col className=\"gutter-row\" span={12}>\r\n        <div className=\"note-content\">\r\n          <div className=\"note-header\">\r\n            <div className=\"note-creator-info\">\r\n              <Link className=\"creator-link\" to={`/users/profile`}>\r\n                <Avatar\r\n                  className=\"note-creator-avatar\"\r\n                  style={{\r\n                    backgroundColor: getAvatarColor(\r\n                      this.props.note.createdBy.name\r\n                    )\r\n                  }}\r\n                >\r\n                  {this.props.note.createdBy.name[0].toUpperCase()}\r\n                </Avatar>\r\n                <span className=\"note-creator-name\">\r\n                  {this.props.note.createdBy.name}\r\n                </span>\r\n                <span className=\"note-creator-username\">\r\n                  @{this.props.note.createdBy.username}\r\n                </span>\r\n                <span className=\"note-creation-date\">\r\n                  {formatDateTime(this.props.note.creationDateTime)}\r\n                </span>\r\n              </Link>\r\n            </div>\r\n            <div className=\"note-title\">{this.props.note.title}</div>\r\n          </div>\r\n          <div className=\"note-content\">{this.props.note.content}</div>\r\n          <div className=\"poll-footer\">\r\n            <div className=\"float-right\">\r\n              <Link\r\n                className=\"vote-button\"\r\n                to={{\r\n                  pathname: \"/note/edit\",\r\n                  state: { noteId: this.props.note.id }\r\n                }}\r\n              >\r\n                <Button type=\"primary\">Edit</Button>\r\n              </Link>\r\n              <span className=\"separator\">•</span>\r\n              <Button\r\n                type=\"danger\"\r\n                // className=\"vote-button\"\r\n                onClick={this.handleDelete.bind(this, this.props.note.id)}\r\n              >\r\n                Delete\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Col>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Note;\r\n","\r\nexport function formatDate(dateString) {\r\n    const date = new Date(dateString);\r\n\r\n    const monthNames = [\r\n      \"January\", \"February\", \"March\",\r\n      \"April\", \"May\", \"June\", \"July\",\r\n      \"August\", \"September\", \"October\",\r\n      \"November\", \"December\"\r\n    ];\r\n  \r\n    const monthIndex = date.getMonth();\r\n    const year = date.getFullYear();\r\n  \r\n    return monthNames[monthIndex] + ' ' + year;\r\n}\r\n  \r\nexport function formatDateTime(dateTimeString) {\r\n  const date = new Date(dateTimeString);\r\n\r\n  const monthNames = [\r\n    \"Jan\", \"Feb\", \"Mar\", \"Apr\",\r\n    \"May\", \"Jun\", \"Jul\", \"Aug\", \r\n    \"Sep\", \"Oct\", \"Nov\", \"Dec\"\r\n  ];\r\n\r\n  const monthIndex = date.getMonth();\r\n  const year = date.getFullYear();\r\n\r\n  return date.getDate() + ' ' + monthNames[monthIndex] + ' ' + year + ' - ' + date.getHours() + ':' + date.getMinutes();\r\n}  ","import React from 'react';\r\nimport { Spin, Icon } from 'antd';\r\n\r\nexport default function LoadingIndicator(props) {\r\n    const antIcon = <Icon type=\"loading-3-quarters\" style={{ fontSize: 30 }} spin />;\r\n    return (\r\n        <Spin indicator={antIcon} style = {{display: 'block', textAlign: 'center', marginTop: 30}} />\r\n    );\r\n}","import React, { Component } from \"react\";\r\nimport { getUserCreatedNotes } from \"../util/APIUtils\";\r\nimport Note from \"./Note\";\r\nimport LoadingIndicator from \"../common/LoadingIndicator\";\r\nimport { Button, Icon, notification, Row, Col } from \"antd\";\r\nimport { NOTE_LIST_SIZE } from \"../constants\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport \"./NoteList.css\";\r\n\r\nclass NoteList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      notes: [],\r\n      page: 0,\r\n      size: 10,\r\n      totalElements: 0,\r\n      totalPages: 0,\r\n      last: true,\r\n      isLoading: false\r\n    };\r\n    this.loadNoteListInit = this.loadNoteListInit.bind(this);\r\n    this.loadNoteList = this.loadNoteList.bind(this);\r\n    this.handleLoadMore = this.handleLoadMore.bind(this);\r\n  }\r\n\r\n  loadNoteList(page = 0, size = NOTE_LIST_SIZE) {\r\n    let promise;\r\n    if (this.props.username) {\r\n      if (this.props.type === \"USER_CREATED_NOTES\") {\r\n        promise = getUserCreatedNotes(this.props.username, page, size);\r\n      }\r\n    }\r\n\r\n    if (!promise) {\r\n      return;\r\n    }\r\n\r\n    this.setState({\r\n      isLoading: true\r\n    });\r\n\r\n    promise\r\n      .then(response => {\r\n        const notes = this.state.notes.slice();\r\n\r\n        this.setState({\r\n          notes: notes.concat(response.content),\r\n          page: response.page,\r\n          size: response.size,\r\n          totalElements: response.totalElements,\r\n          totalPages: response.totalPages,\r\n          last: response.last,\r\n          isLoading: false\r\n        });\r\n      })\r\n      .catch(error => {\r\n        this.setState({\r\n          isLoading: false\r\n        });\r\n      });\r\n  }\r\n\r\n  loadNoteListInit(page = 0, size = NOTE_LIST_SIZE) {\r\n    let promise;\r\n    if (this.props.username) {\r\n      if (this.props.type === \"USER_CREATED_NOTES\") {\r\n        promise = getUserCreatedNotes(this.props.username, page, size);\r\n      }\r\n    }\r\n\r\n    if (!promise) {\r\n      return;\r\n    }\r\n\r\n    this.setState({\r\n      isLoading: true\r\n    });\r\n\r\n    promise\r\n      .then(response => {\r\n        const notes = this.state.notes.slice();\r\n\r\n        this.setState({\r\n          notes: response.content,\r\n          page: response.page,\r\n          size: response.size,\r\n          totalElements: response.totalElements,\r\n          totalPages: response.totalPages,\r\n          last: response.last,\r\n          isLoading: false\r\n        });\r\n      })\r\n      .catch(error => {\r\n        this.setState({\r\n          isLoading: false\r\n        });\r\n      });\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.loadNoteList();\r\n  }\r\n\r\n  componentDidUpdate(nextProps) {\r\n    if (this.props.isAuthenticated !== nextProps.isAuthenticated) {\r\n      // Reset State\r\n      this.setState({\r\n        notes: [],\r\n        page: 0,\r\n        size: 10,\r\n        totalElements: 0,\r\n        totalPages: 0,\r\n        last: true,\r\n        isLoading: false\r\n      });\r\n      this.loadNoteList();\r\n    }\r\n  }\r\n\r\n  handleLoadMore() {\r\n    this.loadNoteList(this.state.page + 1);\r\n  }\r\n\r\n  render() {\r\n    const noteViews = [];\r\n    this.state.notes.forEach((note, noteIndex) => {\r\n      noteViews.push(\r\n        <Note\r\n          key={note.id}\r\n          note={note}\r\n          loadNoteListInit={this.loadNoteListInit}\r\n        />\r\n      );\r\n    });\r\n\r\n    return (\r\n      <Row gutter={16}>\r\n        {noteViews}\r\n        {!this.state.isLoading && this.state.notes.length === 0 ? (\r\n          <div className=\"no-notes-found\">\r\n            <span></span>\r\n          </div>\r\n        ) : null}\r\n        {!this.state.isLoading && !this.state.last ? (\r\n          <div className=\"load-more-notes\">\r\n            <Button\r\n              type=\"dashed\"\r\n              onClick={this.handleLoadMore}\r\n              disabled={this.state.isLoading}\r\n            >\r\n              <Icon type=\"plus\" /> Load more\r\n            </Button>\r\n          </div>\r\n        ) : null}\r\n        {this.state.isLoading ? <LoadingIndicator /> : null}\r\n      </Row>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(NoteList);\r\n","import React, { Component } from \"react\";\r\nimport { createNote } from \"../util/APIUtils\";\r\nimport { NOTE_TITLE_MAX_LENGTH, NOTE_CONTENT_MAX_LENGTH } from \"../constants\";\r\nimport \"./NewNote.css\";\r\nimport { Form, Input, Button, notification } from \"antd\";\r\nconst FormItem = Form.Item;\r\nconst { TextArea } = Input;\r\n\r\nclass NewNote extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      title: {\r\n        text: \"\"\r\n      },\r\n      content: {\r\n        text: \"\"\r\n      }\r\n    };\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.isFormInvalid = this.isFormInvalid.bind(this);\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n    const noteData = {\r\n      title: this.state.title.text,\r\n      content: this.state.content.text\r\n    };\r\n\r\n    createNote(noteData)\r\n      .then(response => {\r\n        this.props.history.push(\"/\");\r\n      })\r\n      .catch(error => {\r\n        if (error.status === 401) {\r\n          this.props.handleLogout(\r\n            \"/login\",\r\n            \"error\",\r\n            \"You have been logged out. Please login create note.\"\r\n          );\r\n        } else {\r\n          notification.error({\r\n            message: \"Journal App\",\r\n            description:\r\n              error.message || \"Sorry! Something went wrong. Please try again!\"\r\n          });\r\n        }\r\n      });\r\n  }\r\n\r\n  validateTitle = titleText => {\r\n    if (titleText.length === 0) {\r\n      return {\r\n        validateStatus: \"error\",\r\n        errorMsg: \"Please enter a title for your note!\"\r\n      };\r\n    } else if (titleText.length > NOTE_TITLE_MAX_LENGTH) {\r\n      return {\r\n        validateStatus: \"error\",\r\n        errorMsg: `Note title is too long (Maximum ${NOTE_TITLE_MAX_LENGTH} characters allowed)`\r\n      };\r\n    } else {\r\n      return {\r\n        validateStatus: \"success\",\r\n        errorMsg: null\r\n      };\r\n    }\r\n  };\r\n\r\n  validateContent = contentText => {\r\n    if (contentText.length === 0) {\r\n      return {\r\n        validateStatus: \"error\",\r\n        errorMsg: \"Please fill the body of your note!\"\r\n      };\r\n    } else if (contentText.length > NOTE_CONTENT_MAX_LENGTH) {\r\n      return {\r\n        validateStatus: \"error\",\r\n        errorMsg: `Note body is too long (Maximum ${NOTE_CONTENT_MAX_LENGTH} characters allowed)`\r\n      };\r\n    } else {\r\n      return {\r\n        validateStatus: \"success\",\r\n        errorMsg: null\r\n      };\r\n    }\r\n  };\r\n\r\n  handleChange(event) {\r\n    const value = event.target.value;\r\n    if (event.target.name === \"title\") {\r\n      this.setState({\r\n        title: {\r\n          text: value,\r\n          ...this.validateTitle(value)\r\n        }\r\n      });\r\n    } else if (event.target.name === \"content\") {\r\n      this.setState({\r\n        content: {\r\n          text: value,\r\n          ...this.validateContent(value)\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  isFormInvalid() {\r\n    if (this.state.title.validateStatus !== \"success\") {\r\n      return true;\r\n    }\r\n    if (this.state.content.validateStatus !== \"success\") {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"new-note-container\">\r\n        <h1 className=\"page-title\">Create Note</h1>\r\n        <div className=\"new-note-content\">\r\n          <Form onSubmit={this.handleSubmit} className=\"create-note-form\">\r\n            <FormItem\r\n              validateStatus={this.state.title.validateStatus}\r\n              help={this.state.title.errorMsg}\r\n              className=\"note-form-row\"\r\n            >\r\n              <Input\r\n                placeholder={\"Note title \"}\r\n                size=\"large\"\r\n                name=\"title\"\r\n                value={this.state.title.text}\r\n                onChange={this.handleChange}\r\n              />\r\n            </FormItem>\r\n            <FormItem\r\n              validateStatus={this.state.content.validateStatus}\r\n              help={this.state.content.errorMsg}\r\n              className=\"note-form-row\"\r\n            >\r\n              <TextArea\r\n                placeholder=\"Enter your note\"\r\n                style={{ fontSize: \"16px\" }}\r\n                autosize={{ minRows: 3, maxRows: 6 }}\r\n                name=\"content\"\r\n                value={this.state.content.text}\r\n                onChange={this.handleChange}\r\n              />\r\n            </FormItem>\r\n            <FormItem className=\"note-form-row\">\r\n              <Button\r\n                type=\"primary\"\r\n                htmlType=\"submit\"\r\n                size=\"large\"\r\n                disabled={this.isFormInvalid()}\r\n                className=\"create-note-form-button\"\r\n              >\r\n                Create Note\r\n              </Button>\r\n            </FormItem>\r\n          </Form>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NewNote;\r\n","import React, { Component } from \"react\";\r\nimport { updateNote, getNote } from \"../util/APIUtils\";\r\nimport { NOTE_TITLE_MAX_LENGTH, NOTE_CONTENT_MAX_LENGTH } from \"../constants\";\r\nimport \"./NewNote.css\";\r\nimport { Form, Input, Button, notification } from \"antd\";\r\nconst FormItem = Form.Item;\r\nconst { TextArea } = Input;\r\n\r\nclass EditNote extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      title: {\r\n        text: \"\"\r\n      },\r\n      content: {\r\n        text: \"\"\r\n      }\r\n    };\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.isFormInvalid = this.isFormInvalid.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    getNote(this.props.location.state.noteId)\r\n      .then(response => {\r\n        this.setState({\r\n          title: { text: response.title, validateStatus: \"success\" },\r\n          content: { text: response.content, validateStatus: \"success\" }\r\n        });\r\n      })\r\n      .catch(error => {\r\n        if (error.status === 401) {\r\n          this.props.handleLogout(\r\n            \"/login\",\r\n            \"error\",\r\n            \"You have been logged out. Please login create note.\"\r\n          );\r\n        } else {\r\n          notification.error({\r\n            message: \"Journal App\",\r\n            description:\r\n              error.message || \"Sorry! Something went wrong. Please try again!\"\r\n          });\r\n        }\r\n      });\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n    const noteData = {\r\n      id: this.props.location.state.noteId,\r\n      title: this.state.title.text,\r\n      content: this.state.content.text\r\n    };\r\n\r\n    updateNote(noteData)\r\n      .then(response => {\r\n        this.props.history.push(\"/\");\r\n      })\r\n      .catch(error => {\r\n        if (error.status === 401) {\r\n          this.props.handleLogout(\r\n            \"/login\",\r\n            \"error\",\r\n            \"You have been logged out. Please login create note.\"\r\n          );\r\n        } else {\r\n          notification.error({\r\n            message: \"Journal App\",\r\n            description:\r\n              error.message || \"Sorry! Something went wrong. Please try again!\"\r\n          });\r\n        }\r\n      });\r\n  }\r\n\r\n  validateTitle = titleText => {\r\n    if (titleText.length === 0) {\r\n      return {\r\n        validateStatus: \"error\",\r\n        errorMsg: \"Please enter a title for your note!\"\r\n      };\r\n    } else if (titleText.length > NOTE_TITLE_MAX_LENGTH) {\r\n      return {\r\n        validateStatus: \"error\",\r\n        errorMsg: `Note title is too long (Maximum ${NOTE_TITLE_MAX_LENGTH} characters allowed)`\r\n      };\r\n    } else {\r\n      return {\r\n        validateStatus: \"success\",\r\n        errorMsg: null\r\n      };\r\n    }\r\n  };\r\n\r\n  validateContent = contentText => {\r\n    if (contentText.length === 0) {\r\n      return {\r\n        validateStatus: \"error\",\r\n        errorMsg: \"Please fill the body of your note!\"\r\n      };\r\n    } else if (contentText.length > NOTE_CONTENT_MAX_LENGTH) {\r\n      return {\r\n        validateStatus: \"error\",\r\n        errorMsg: `Note body is too long (Maximum ${NOTE_CONTENT_MAX_LENGTH} characters allowed)`\r\n      };\r\n    } else {\r\n      return {\r\n        validateStatus: \"success\",\r\n        errorMsg: null\r\n      };\r\n    }\r\n  };\r\n\r\n  handleChange(event) {\r\n    const value = event.target.value;\r\n    if (event.target.name === \"title\") {\r\n      this.setState({\r\n        title: {\r\n          text: value,\r\n          ...this.validateTitle(value)\r\n        }\r\n      });\r\n    } else if (event.target.name === \"content\") {\r\n      this.setState({\r\n        content: {\r\n          text: value,\r\n          ...this.validateContent(value)\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  isFormInvalid() {\r\n    if (this.state.title.validateStatus !== \"success\") {\r\n      return true;\r\n    }\r\n    if (this.state.content.validateStatus !== \"success\") {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"new-note-container\">\r\n        <h1 className=\"page-title\">Edit Note</h1>\r\n        <div className=\"new-note-content\">\r\n          <Form onSubmit={this.handleSubmit} className=\"create-note-form\">\r\n            <FormItem\r\n              validateStatus={this.state.title.validateStatus}\r\n              help={this.state.title.errorMsg}\r\n              className=\"note-form-row\"\r\n            >\r\n              <Input\r\n                placeholder={\"Note title \"}\r\n                size=\"large\"\r\n                name=\"title\"\r\n                value={this.state.title.text}\r\n                onChange={this.handleChange}\r\n              />\r\n            </FormItem>\r\n            <FormItem\r\n              validateStatus={this.state.content.validateStatus}\r\n              help={this.state.content.errorMsg}\r\n              className=\"note-form-row\"\r\n            >\r\n              <TextArea\r\n                placeholder=\"Enter your note\"\r\n                style={{ fontSize: \"16px\" }}\r\n                autosize={{ minRows: 3, maxRows: 6 }}\r\n                name=\"content\"\r\n                value={this.state.content.text}\r\n                onChange={this.handleChange}\r\n              />\r\n            </FormItem>\r\n            <FormItem className=\"note-form-row\">\r\n              <Button\r\n                type=\"primary\"\r\n                htmlType=\"submit\"\r\n                size=\"large\"\r\n                disabled={this.isFormInvalid()}\r\n                className=\"create-note-form-button\"\r\n              >\r\n                Create Note\r\n              </Button>\r\n            </FormItem>\r\n          </Form>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EditNote;\r\n","import React, { Component } from 'react';\r\nimport { login } from '../../util/APIUtils';\r\nimport './Login.css';\r\nimport { Link } from 'react-router-dom';\r\nimport { ACCESS_TOKEN } from '../../constants';\r\n\r\nimport { Form, Input, Button, Icon, notification } from 'antd';\r\nconst FormItem = Form.Item;\r\n\r\nclass Login extends Component {\r\n    render() {\r\n        const AntWrappedLoginForm = Form.create()(LoginForm)\r\n        return (\r\n            <div className=\"login-container\">\r\n                <h1 className=\"page-title\">Login</h1>\r\n                <div className=\"login-content\">\r\n                    <AntWrappedLoginForm onLogin={this.props.onLogin} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass LoginForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        event.preventDefault();   \r\n        this.props.form.validateFields((err, values) => {\r\n            if (!err) {\r\n                const loginRequest = Object.assign({}, values);\r\n                login(loginRequest)\r\n                .then(response => {\r\n                    localStorage.setItem(ACCESS_TOKEN, response.accessToken);\r\n                    this.props.onLogin();\r\n                }).catch(error => {\r\n                    if(error.status === 401) {\r\n                        notification.error({\r\n                            message: 'Journal App',\r\n                            description: 'Your Username or Password is incorrect. Please try again!'\r\n                        });                    \r\n                    } else {\r\n                        notification.error({\r\n                            message: 'Journal App',\r\n                            description: error.message || 'Sorry! Something went wrong. Please try again!'\r\n                        });                                            \r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { getFieldDecorator } = this.props.form;\r\n        return (\r\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\r\n                <FormItem>\r\n                    {getFieldDecorator('usernameOrEmail', {\r\n                        rules: [{ required: true, message: 'Please input your username or email!' }],\r\n                    })(\r\n                    <Input \r\n                        prefix={<Icon type=\"user\" />}\r\n                        size=\"large\"\r\n                        name=\"usernameOrEmail\" \r\n                        placeholder=\"Username or Email\" />    \r\n                    )}\r\n                </FormItem>\r\n                <FormItem>\r\n                {getFieldDecorator('password', {\r\n                    rules: [{ required: true, message: 'Please input your Password!' }],\r\n                })(\r\n                    <Input \r\n                        prefix={<Icon type=\"lock\" />}\r\n                        size=\"large\"\r\n                        name=\"password\" \r\n                        type=\"password\" \r\n                        placeholder=\"Password\"  />                        \r\n                )}\r\n                </FormItem>\r\n                <FormItem>\r\n                    <Button type=\"primary\" htmlType=\"submit\" size=\"large\" className=\"login-form-button\">Login</Button>\r\n                    Or <Link to=\"/signup\">register now!</Link>\r\n                </FormItem>\r\n            </Form>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default Login;","import React, { Component } from 'react';\r\nimport { signup, checkUsernameAvailability, checkEmailAvailability } from '../../util/APIUtils';\r\nimport './Signup.css';\r\nimport { Link } from 'react-router-dom';\r\nimport { \r\n    NAME_MIN_LENGTH, NAME_MAX_LENGTH, \r\n    USERNAME_MIN_LENGTH, USERNAME_MAX_LENGTH,\r\n    EMAIL_MAX_LENGTH,\r\n    PASSWORD_MIN_LENGTH, PASSWORD_MAX_LENGTH\r\n} from '../../constants';\r\n\r\nimport { Form, Input, Button, notification } from 'antd';\r\nconst FormItem = Form.Item;\r\n\r\nclass Signup extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            name: {\r\n                value: ''\r\n            },\r\n            username: {\r\n                value: ''\r\n            },\r\n            email: {\r\n                value: ''\r\n            },\r\n            password: {\r\n                value: ''\r\n            }\r\n        }\r\n        this.handleInputChange = this.handleInputChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.validateUsernameAvailability = this.validateUsernameAvailability.bind(this);\r\n        this.validateEmailAvailability = this.validateEmailAvailability.bind(this);\r\n        this.isFormInvalid = this.isFormInvalid.bind(this);\r\n    }\r\n\r\n    handleInputChange(event, validationFun) {\r\n        const target = event.target;\r\n        const inputName = target.name;        \r\n        const inputValue = target.value;\r\n\r\n        this.setState({\r\n            [inputName] : {\r\n                value: inputValue,\r\n                ...validationFun(inputValue)\r\n            }\r\n        });\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n    \r\n        const signupRequest = {\r\n            name: this.state.name.value,\r\n            email: this.state.email.value,\r\n            username: this.state.username.value,\r\n            password: this.state.password.value\r\n        };\r\n        signup(signupRequest)\r\n        .then(response => {\r\n            notification.success({\r\n                message: 'Journal App',\r\n                description: \"Thank you! You're successfully registered. Please Login to continue!\",\r\n            });          \r\n            this.props.history.push(\"/login\");\r\n        }).catch(error => {\r\n            notification.error({\r\n                message: 'Journal App',\r\n                description: error.message || 'Sorry! Something went wrong. Please try again!'\r\n            });\r\n        });\r\n    }\r\n\r\n    isFormInvalid() {\r\n        return !(this.state.name.validateStatus === 'success' &&\r\n            this.state.username.validateStatus === 'success' &&\r\n            this.state.email.validateStatus === 'success' &&\r\n            this.state.password.validateStatus === 'success'\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"signup-container\">\r\n                <h1 className=\"page-title\">Sign Up</h1>\r\n                <div className=\"signup-content\">\r\n                    <Form onSubmit={this.handleSubmit} className=\"signup-form\">\r\n                        <FormItem \r\n                            label=\"Full Name\"\r\n                            validateStatus={this.state.name.validateStatus}\r\n                            help={this.state.name.errorMsg}>\r\n                            <Input \r\n                                size=\"large\"\r\n                                name=\"name\"\r\n                                autoComplete=\"off\"\r\n                                placeholder=\"Your full name\"\r\n                                value={this.state.name.value} \r\n                                onChange={(event) => this.handleInputChange(event, this.validateName)} />    \r\n                        </FormItem>\r\n                        <FormItem label=\"Username\"\r\n                            hasFeedback\r\n                            validateStatus={this.state.username.validateStatus}\r\n                            help={this.state.username.errorMsg}>\r\n                            <Input \r\n                                size=\"large\"\r\n                                name=\"username\" \r\n                                autoComplete=\"off\"\r\n                                placeholder=\"A unique username\"\r\n                                value={this.state.username.value} \r\n                                onBlur={this.validateUsernameAvailability}\r\n                                onChange={(event) => this.handleInputChange(event, this.validateUsername)} />    \r\n                        </FormItem>\r\n                        <FormItem \r\n                            label=\"Email\"\r\n                            hasFeedback\r\n                            validateStatus={this.state.email.validateStatus}\r\n                            help={this.state.email.errorMsg}>\r\n                            <Input \r\n                                size=\"large\"\r\n                                name=\"email\" \r\n                                type=\"email\" \r\n                                autoComplete=\"off\"\r\n                                placeholder=\"Your email\"\r\n                                value={this.state.email.value} \r\n                                onBlur={this.validateEmailAvailability}\r\n                                onChange={(event) => this.handleInputChange(event, this.validateEmail)} />    \r\n                        </FormItem>\r\n                        <FormItem \r\n                            label=\"Password\"\r\n                            validateStatus={this.state.password.validateStatus}\r\n                            help={this.state.password.errorMsg}>\r\n                            <Input \r\n                                size=\"large\"\r\n                                name=\"password\" \r\n                                type=\"password\"\r\n                                autoComplete=\"off\"\r\n                                placeholder=\"A password between 6 to 20 characters\" \r\n                                value={this.state.password.value} \r\n                                onChange={(event) => this.handleInputChange(event, this.validatePassword)} />    \r\n                        </FormItem>\r\n                        <FormItem>\r\n                            <Button type=\"primary\" \r\n                                htmlType=\"submit\" \r\n                                size=\"large\" \r\n                                className=\"signup-form-button\"\r\n                                disabled={this.isFormInvalid()}>Sign up</Button>\r\n                            Already registed? <Link to=\"/login\">Login now!</Link>\r\n                        </FormItem>\r\n                    </Form>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    // Validation Functions\r\n\r\n    validateName = (name) => {\r\n        if(name.length < NAME_MIN_LENGTH) {\r\n            return {\r\n                validateStatus: 'error',\r\n                errorMsg: `Name is too short (Minimum ${NAME_MIN_LENGTH} characters needed.)`\r\n            }\r\n        } else if (name.length > NAME_MAX_LENGTH) {\r\n            return {\r\n                validationStatus: 'error',\r\n                errorMsg: `Name is too long (Maximum ${NAME_MAX_LENGTH} characters allowed.)`\r\n            }\r\n        } else {\r\n            return {\r\n                validateStatus: 'success',\r\n                errorMsg: null,\r\n              };            \r\n        }\r\n    }\r\n\r\n    validateEmail = (email) => {\r\n        if(!email) {\r\n            return {\r\n                validateStatus: 'error',\r\n                errorMsg: 'Email may not be empty'                \r\n            }\r\n        }\r\n\r\n        const EMAIL_REGEX = RegExp('[^@ ]+@[^@ ]+\\\\.[^@ ]+');\r\n        if(!EMAIL_REGEX.test(email)) {\r\n            return {\r\n                validateStatus: 'error',\r\n                errorMsg: 'Email not valid'\r\n            }\r\n        }\r\n\r\n        if(email.length > EMAIL_MAX_LENGTH) {\r\n            return {\r\n                validateStatus: 'error',\r\n                errorMsg: `Email is too long (Maximum ${EMAIL_MAX_LENGTH} characters allowed)`\r\n            }\r\n        }\r\n\r\n        return {\r\n            validateStatus: null,\r\n            errorMsg: null\r\n        }\r\n    }\r\n\r\n    validateUsername = (username) => {\r\n        if(username.length < USERNAME_MIN_LENGTH) {\r\n            return {\r\n                validateStatus: 'error',\r\n                errorMsg: `Username is too short (Minimum ${USERNAME_MIN_LENGTH} characters needed.)`\r\n            }\r\n        } else if (username.length > USERNAME_MAX_LENGTH) {\r\n            return {\r\n                validationStatus: 'error',\r\n                errorMsg: `Username is too long (Maximum ${USERNAME_MAX_LENGTH} characters allowed.)`\r\n            }\r\n        } else {\r\n            return {\r\n                validateStatus: null,\r\n                errorMsg: null\r\n            }\r\n        }\r\n    }\r\n\r\n    validateUsernameAvailability() {\r\n        // First check for client side errors in username\r\n        const usernameValue = this.state.username.value;\r\n        const usernameValidation = this.validateUsername(usernameValue);\r\n\r\n        if(usernameValidation.validateStatus === 'error') {\r\n            this.setState({\r\n                username: {\r\n                    value: usernameValue,\r\n                    ...usernameValidation\r\n                }\r\n            });\r\n            return;\r\n        }\r\n\r\n        this.setState({\r\n            username: {\r\n                value: usernameValue,\r\n                validateStatus: 'validating',\r\n                errorMsg: null\r\n            }\r\n        });\r\n\r\n        checkUsernameAvailability(usernameValue)\r\n        .then(response => {\r\n            if(response.available) {\r\n                this.setState({\r\n                    username: {\r\n                        value: usernameValue,\r\n                        validateStatus: 'success',\r\n                        errorMsg: null\r\n                    }\r\n                });\r\n            } else {\r\n                this.setState({\r\n                    username: {\r\n                        value: usernameValue,\r\n                        validateStatus: 'error',\r\n                        errorMsg: 'This username is already taken'\r\n                    }\r\n                });\r\n            }\r\n        }).catch(error => {\r\n            // Marking validateStatus as success, Form will be recchecked at server\r\n            this.setState({\r\n                username: {\r\n                    value: usernameValue,\r\n                    validateStatus: 'success',\r\n                    errorMsg: null\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    validateEmailAvailability() {\r\n        // First check for client side errors in email\r\n        const emailValue = this.state.email.value;\r\n        const emailValidation = this.validateEmail(emailValue);\r\n\r\n        if(emailValidation.validateStatus === 'error') {\r\n            this.setState({\r\n                email: {\r\n                    value: emailValue,\r\n                    ...emailValidation\r\n                }\r\n            });    \r\n            return;\r\n        }\r\n\r\n        this.setState({\r\n            email: {\r\n                value: emailValue,\r\n                validateStatus: 'validating',\r\n                errorMsg: null\r\n            }\r\n        });\r\n\r\n        checkEmailAvailability(emailValue)\r\n        .then(response => {\r\n            if(response.available) {\r\n                this.setState({\r\n                    email: {\r\n                        value: emailValue,\r\n                        validateStatus: 'success',\r\n                        errorMsg: null\r\n                    }\r\n                });\r\n            } else {\r\n                this.setState({\r\n                    email: {\r\n                        value: emailValue,\r\n                        validateStatus: 'error',\r\n                        errorMsg: 'This Email is already registered'\r\n                    }\r\n                });\r\n            }\r\n        }).catch(error => {\r\n            // Marking validateStatus as success, Form will be recchecked at server\r\n            this.setState({\r\n                email: {\r\n                    value: emailValue,\r\n                    validateStatus: 'success',\r\n                    errorMsg: null\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    validatePassword = (password) => {\r\n        if(password.length < PASSWORD_MIN_LENGTH) {\r\n            return {\r\n                validateStatus: 'error',\r\n                errorMsg: `Password is too short (Minimum ${PASSWORD_MIN_LENGTH} characters needed.)`\r\n            }\r\n        } else if (password.length > PASSWORD_MAX_LENGTH) {\r\n            return {\r\n                validationStatus: 'error',\r\n                errorMsg: `Password is too long (Maximum ${PASSWORD_MAX_LENGTH} characters allowed.)`\r\n            }\r\n        } else {\r\n            return {\r\n                validateStatus: 'success',\r\n                errorMsg: null,\r\n            };            \r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default Signup;","import React, { Component } from 'react';\r\nimport './NotFound.css';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button } from 'antd';\r\n\r\nclass NotFound extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"page-not-found\">\r\n                <h1 className=\"title\">\r\n                    404\r\n                </h1>\r\n                <div className=\"desc\">\r\n                    The Page you're looking for was not found.\r\n                </div>\r\n                <Link to=\"/\"><Button className=\"go-back-btn\" type=\"primary\" size=\"large\">Go Back</Button></Link>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NotFound;","import React, { Component } from 'react';\r\nimport './ServerError.css';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button } from 'antd';\r\n\r\nclass ServerError extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"server-error-page\">\r\n                <h1 className=\"server-error-title\">\r\n                    500\r\n                </h1>\r\n                <div className=\"server-error-desc\">\r\n                    Oops! Something went wrong at our Server. Why don't you go back?\r\n                </div>\r\n                <Link to=\"/\"><Button className=\"server-error-go-back-btn\" type=\"primary\" size=\"large\">Go Back</Button></Link>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ServerError;","import React, { Component } from \"react\";\r\nimport NoteList from \"../../note/NoteList\";\r\nimport { getUserProfile } from \"../../util/APIUtils\";\r\nimport { Avatar, Tabs } from \"antd\";\r\nimport { getAvatarColor } from \"../../util/Colors\";\r\nimport { formatDate } from \"../../util/Helpers\";\r\nimport LoadingIndicator from \"../../common/LoadingIndicator\";\r\nimport \"./Profile.css\";\r\nimport NotFound from \"../../common/NotFound\";\r\nimport ServerError from \"../../common/ServerError\";\r\n\r\nconst TabPane = Tabs.TabPane;\r\n\r\nclass Profile extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      user: null,\r\n      isLoading: false\r\n    };\r\n    this.loadUserProfile = this.loadUserProfile.bind(this);\r\n  }\r\n\r\n  loadUserProfile(username) {\r\n    this.setState({\r\n      isLoading: true\r\n    });\r\n\r\n    getUserProfile(username)\r\n      .then(response => {\r\n        this.setState({\r\n          user: response,\r\n          isLoading: false\r\n        });\r\n      })\r\n      .catch(error => {\r\n        if (error.status === 404) {\r\n          this.setState({\r\n            notFound: true,\r\n            isLoading: false\r\n          });\r\n        } else {\r\n          this.setState({\r\n            serverError: true,\r\n            isLoading: false\r\n          });\r\n        }\r\n      });\r\n  }\r\n\r\n  componentDidMount() {\r\n    const username = this.props.match.params.username;\r\n    this.loadUserProfile(username);\r\n  }\r\n\r\n  componentDidUpdate(nextProps) {\r\n    if (this.props.match.params.username !== nextProps.match.params.username) {\r\n      this.loadUserProfile(nextProps.match.params.username);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    if (this.state.isLoading) {\r\n      return <LoadingIndicator />;\r\n    }\r\n\r\n    if (this.state.notFound) {\r\n      return <NotFound />;\r\n    }\r\n\r\n    if (this.state.serverError) {\r\n      return <ServerError />;\r\n    }\r\n\r\n    const tabBarStyle = {\r\n      textAlign: \"center\"\r\n    };\r\n\r\n    return (\r\n      <div className=\"profile\">\r\n        {this.state.user ? (\r\n          <div className=\"user-profile\">\r\n            <div className=\"user-details\">\r\n              <div className=\"user-avatar\">\r\n                <Avatar\r\n                  className=\"user-avatar-circle\"\r\n                  style={{\r\n                    backgroundColor: getAvatarColor(this.state.user.name)\r\n                  }}\r\n                >\r\n                  {this.state.user.name[0].toUpperCase()}\r\n                </Avatar>\r\n              </div>\r\n              <div className=\"user-summary\">\r\n                <div className=\"full-name\">{this.state.user.name}</div>\r\n                <div className=\"username\">@{this.state.user.username}</div>\r\n                <div className=\"user-joined\">\r\n                  Joined {formatDate(this.state.user.joinedAt)}\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"user-note-details\">\r\n              <Tabs\r\n                defaultActiveKey=\"1\"\r\n                animated={false}\r\n                tabBarStyle={tabBarStyle}\r\n                size=\"large\"\r\n                className=\"profile-tabs\"\r\n              >\r\n                <TabPane tab={`${this.state.user.noteCount} Notes`} key=\"1\">\r\n                  <NoteList\r\n                    username={this.props.match.params.username}\r\n                    type=\"USER_CREATED_NOTES\"\r\n                  />\r\n                </TabPane>\r\n              </Tabs>\r\n            </div>\r\n          </div>\r\n        ) : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Profile;\r\n","import React, { Component } from \"react\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport \"./AppHeader.css\";\r\nimport noteIcon from \"../note.svg\";\r\nimport { Layout, Menu, Dropdown, Icon } from \"antd\";\r\nconst Header = Layout.Header;\r\n\r\nclass AppHeader extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleMenuClick = this.handleMenuClick.bind(this);\r\n  }\r\n\r\n  handleMenuClick({ key }) {\r\n    if (key === \"logout\") {\r\n      this.props.onLogout();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let menuItems;\r\n    if (this.props.currentUser.username !== \"\") {\r\n      menuItems = [\r\n        <Menu.Item key=\"/\">\r\n          <Link to=\"/\">\r\n            <Icon type=\"home\" className=\"nav-icon\" />\r\n          </Link>\r\n        </Menu.Item>,\r\n        <Menu.Item key=\"/note/new\">\r\n          <Link to=\"/note/new\">\r\n            <img src={noteIcon} alt=\"note\" className=\"note-icon\" />\r\n          </Link>\r\n        </Menu.Item>,\r\n        <Menu.Item key=\"/profile\" className=\"profile-menu\">\r\n          <ProfileDropdownMenu\r\n            currentUser={this.props.currentUser}\r\n            handleMenuClick={this.handleMenuClick}\r\n          />\r\n        </Menu.Item>\r\n      ];\r\n    } else {\r\n      menuItems = [\r\n        <Menu.Item key=\"/login\">\r\n          <Link to=\"/login\">Login</Link>\r\n        </Menu.Item>,\r\n        <Menu.Item key=\"/signup\">\r\n          <Link to=\"/signup\">Signup</Link>\r\n        </Menu.Item>\r\n      ];\r\n    }\r\n\r\n    return (\r\n      <Header className=\"app-header\">\r\n        <div className=\"container\">\r\n          <div className=\"app-title\">\r\n            <Link to=\"/\">Journal App</Link>\r\n          </div>\r\n          <Menu\r\n            className=\"app-menu\"\r\n            mode=\"horizontal\"\r\n            selectedKeys={[this.props.location.pathname]}\r\n            style={{ lineHeight: \"64px\" }}\r\n          >\r\n            {menuItems}\r\n          </Menu>\r\n        </div>\r\n      </Header>\r\n    );\r\n  }\r\n}\r\n\r\nfunction ProfileDropdownMenu(props) {\r\n  const dropdownMenu = (\r\n    <Menu onClick={props.handleMenuClick} className=\"profile-dropdown-menu\">\r\n      <Menu.Item key=\"user-info\" className=\"dropdown-item\" disabled>\r\n        <div className=\"user-full-name-info\">{props.currentUser.name}</div>\r\n        <div className=\"username-info\">@{props.currentUser.username}</div>\r\n      </Menu.Item>\r\n      <Menu.Divider />\r\n      <Menu.Item key=\"profile\" className=\"dropdown-item\">\r\n        <Link to={`/users/profile`}>Profile</Link>\r\n      </Menu.Item>\r\n      <Menu.Item key=\"logout\" className=\"dropdown-item\">\r\n        Logout\r\n      </Menu.Item>\r\n    </Menu>\r\n  );\r\n\r\n  return (\r\n    <Dropdown\r\n      overlay={dropdownMenu}\r\n      trigger={[\"click\"]}\r\n      getPopupContainer={() =>\r\n        document.getElementsByClassName(\"profile-menu\")[0]\r\n      }\r\n    >\r\n      <a className=\"ant-dropdown-link\">\r\n        <Icon type=\"user\" className=\"nav-icon\" style={{ marginRight: 0 }} />{\" \"}\r\n        <Icon type=\"down\" />\r\n      </a>\r\n    </Dropdown>\r\n  );\r\n}\r\n\r\nexport default withRouter(AppHeader);\r\n","import React from 'react';\r\nimport {\r\n    Route,\r\n    Redirect\r\n  } from \"react-router-dom\";\r\n  \r\n  \r\nconst PrivateRoute = ({ component: Component, authenticated, ...rest }) => (\r\n    <Route\r\n      {...rest}\r\n      render={props =>\r\n        authenticated ? (\r\n          <Component {...rest} {...props} />\r\n        ) : (\r\n          <Redirect\r\n            to={{\r\n              pathname: '/login',\r\n              state: { from: props.location }\r\n            }}\r\n          />\r\n        )\r\n      }\r\n    />\r\n);\r\n  \r\nexport default PrivateRoute","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport { Route, withRouter, Switch } from \"react-router-dom\";\r\n\r\nimport { getCurrentUser } from \"../util/APIUtils\";\r\nimport { ACCESS_TOKEN } from \"../constants\";\r\n\r\nimport NoteList from \"../note/NoteList\";\r\nimport NewNote from \"../note/NewNote\";\r\nimport EditNote from \"../note/EditNote\";\r\nimport Login from \"../user/login/Login\";\r\nimport Signup from \"../user/signup/Signup\";\r\nimport Profile from \"../user/profile/Profile\";\r\nimport AppHeader from \"../common/AppHeader\";\r\nimport NotFound from \"../common/NotFound\";\r\nimport LoadingIndicator from \"../common/LoadingIndicator\";\r\nimport PrivateRoute from \"../common/PrivateRoute\";\r\n\r\nimport { Layout, notification } from \"antd\";\r\nconst { Content } = Layout;\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      currentUser: {\r\n        username: \"\"\r\n      },\r\n      isAuthenticated: false,\r\n      isLoading: false\r\n    };\r\n    this.handleLogout = this.handleLogout.bind(this);\r\n    this.loadCurrentUser = this.loadCurrentUser.bind(this);\r\n    this.handleLogin = this.handleLogin.bind(this);\r\n\r\n    notification.config({\r\n      placement: \"topRight\",\r\n      top: 70,\r\n      duration: 3\r\n    });\r\n  }\r\n\r\n  loadCurrentUser() {\r\n    this.setState({\r\n      isLoading: true\r\n    });\r\n    getCurrentUser()\r\n      .then(response => {\r\n        this.setState({\r\n          currentUser: response,\r\n          isAuthenticated: true,\r\n          isLoading: false\r\n        });\r\n        console.log(this.state.currentUser.username);\r\n      })\r\n      .catch(error => {\r\n        this.setState({\r\n          isLoading: false\r\n        });\r\n      });\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.loadCurrentUser();\r\n  }\r\n\r\n  handleLogout(\r\n    redirectTo = \"/\",\r\n    notificationType = \"success\",\r\n    description = \"You're successfully logged out.\"\r\n  ) {\r\n    localStorage.removeItem(ACCESS_TOKEN);\r\n\r\n    this.setState({\r\n      currentUser: null,\r\n      isAuthenticated: false,\r\n      currentUser: {\r\n        username: \"\"\r\n      }\r\n    });\r\n\r\n    this.props.history.push(redirectTo);\r\n\r\n    notification[notificationType]({\r\n      message: \"Journal App\",\r\n      description: description\r\n    });\r\n  }\r\n\r\n  handleLogin() {\r\n    notification.success({\r\n      message: \"Journal App\",\r\n      description: \"You're successfully logged in.\"\r\n    });\r\n    this.loadCurrentUser();\r\n    this.props.history.push(\"/\");\r\n  }\r\n\r\n  render() {\r\n    if (this.state.isLoading) {\r\n      return <LoadingIndicator />;\r\n    }\r\n    return (\r\n      <Layout className=\"app-container\">\r\n        <AppHeader\r\n          isAuthenticated={this.state.isAuthenticated}\r\n          currentUser={this.state.currentUser}\r\n          onLogout={this.handleLogout}\r\n        />\r\n\r\n        <Content className=\"app-content\">\r\n          <div className=\"container\">\r\n            <Switch>\r\n              <Route\r\n                exact\r\n                path=\"/\"\r\n                render={props => (\r\n                  <NoteList\r\n                    isAuthenticated={this.state.isAuthenticated}\r\n                    currentUser={this.state.currentUser}\r\n                    handleLogout={this.handleLogout}\r\n                    username={this.state.currentUser.username}\r\n                    type=\"USER_CREATED_NOTES\"\r\n                    {...props}\r\n                  />\r\n                )}\r\n              ></Route>\r\n              <Route\r\n                path=\"/login\"\r\n                render={props => (\r\n                  <Login onLogin={this.handleLogin} {...props} />\r\n                )}\r\n              ></Route>\r\n              <Route path=\"/signup\" component={Signup}></Route>\r\n              <Route\r\n                path=\"/users/:username\"\r\n                render={props => (\r\n                  <Profile\r\n                    isAuthenticated={this.state.isAuthenticated}\r\n                    currentUser={this.state.currentUser}\r\n                    {...props}\r\n                  />\r\n                )}\r\n              ></Route>\r\n              <PrivateRoute\r\n                authenticated={this.state.isAuthenticated}\r\n                path=\"/note/new\"\r\n                component={NewNote}\r\n                handleLogout={this.handleLogout}\r\n              ></PrivateRoute>\r\n              <PrivateRoute\r\n                authenticated={this.state.isAuthenticated}\r\n                path=\"/note/edit\"\r\n                component={EditNote}\r\n                handleLogout={this.handleLogout}\r\n              ></PrivateRoute>\r\n              <Route component={NotFound}></Route>\r\n            </Switch>\r\n          </div>\r\n        </Content>\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(App);\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './app/App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n    <Router>\r\n        <App />\r\n    </Router>, \r\n    document.getElementById('root')\r\n);\r\n\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}